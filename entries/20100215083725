Subject: Debian on UBIFS upgrade on SheevaPlug
Content-Type: text/x-markdown
Alias: ubifs-on-sheeva
Tags: sheeva,linux,debian,embedded

I picked up a [SheevaPlug](http://en.wikipedia.org/wiki/SheevaPlug) recently.  In a few weeks
I'll try to use it as a *git server* in a classroom setting at [Flourish Conf](http://flourishconf.com/),
where I will be speaking about [Git]{tags/git}.

<img src=/~bart/pic/marvell_sheevaplug_1-240x213.jpg>

This platform consists of a 1.2 GHz ARM processor (*Feroceon 88FR131 rev 1 (v5l)*),
512M of SDRAM, 512M of NAND flash, 1Gbit ethernet, USB, SD card reader, and ... well, that's it.

The software installed on the SheevaPlug leaves a bad taste in my mouth.  I am glad that
they picked Linux, and more over that they picked Debian/Ubuntu.  What I don't appreciate
is that there are a dozen things broken out of the box, and it seems like the system is a
hodgepodge of packages from Debian and Ubuntu.


The first thing I decided to do was to install Debian/sqeeze on it.  And since I was reinstalling, I
wanted to upgrade the on-board flash file system to [UBIFS](http://www.linux-mtd.infradead.org/doc/ubifs.html#L_overview).
The following is an account of things I needed to do to get Debian running on UBIFS on the SheevaPlug.

<read-more>

### Prior work...

Fortunately, I didn't have to reinvent the wheel.  I read the very good [Installing Debian To Flash](http://www.plugcomputer.org/plugwiki/index.php/Installing_Debian_To_Flash) wiki page on [PlugWiki](http://www.plugcomputer.org/plugwiki).  It's a very precise, and well documented,
procedure.  I learned a lot about the internal setup.  However, the procedure fails around the 75% mark.

When you reach the step 8, [Convert internal flash root partition to UBIFS](http://www.plugcomputer.org/plugwiki/index.php/Installing_Debian_To_Flash#Convert_internal_flash_root_partition_to_UBIFS), you will get errors like the ones reported
[here](http://plugcomputer.org/plugforum/index.php?topic=1279.msg8119#msg8119).  More specifically using `ubimkvol` to
create an empty volume will fail like this:

    # ubimkvol /dev/ubi0 -N rootfs -m
    Set volume size to 517386240
    [ 1286.379273] UBI error: ubi_io_write: error -5 while writing 512 bytes to PEB 0:512, written 0 bytes
    [ 1286.388397] UBI warning: ubi_eba_write_leb: failed to write VID header to LEB 2147479551:0, PEB 0
    [ 1286.398034] UBI: try another PEB
    [ 1286.401461] UBI: run torture test for PEB 0

### A different way of creating an ubifs image...

Fortunately in the same thread as the error report above, [pingtoo outlines the off-line fs creation procedure](http://plugcomputer.org/plugforum/index.php?topic=1279.msg7879#msg7879).  While the procedure there crashes too, I was able to get it working after modifying it a bit.

### Finished off the last 25%...

You have followed the [Installing Debian To Flash](http://www.plugcomputer.org/plugwiki/index.php/Installing_Debian_To_Flash)
instructions and you have a SheevaPlug running uboot version 3.4.19, and you have installed Debian on a USB stick.

* boot the SheevaPlug from USB

  - create bind mount to avoid picking up other filesystems

    # mkdir /tmp/root
    # mount -o bind / /tmp/root

  - create the ubifs
   .
   We will create this file in a ram disk (`tmpfs`) ...

    # mkdir /tmp/work
    # mount -t tmpfs none /tmp/work
    # mkfs.ubifs -v -r /tmp/root -m 2048 -e 129024 -c 4096 -o /tmp/work/ubifs.img

  - here is the config file for creating the UBI image

    # cat > /tmp/ubi.cfg <<_EOF_
    [rootfs-volume]
    mode=ubi
    image=/tmp/work/ubifs.img
    vol_id=0
    vol_size=400MiB
    vol_type=dynamic
    vol_name=rootfs
    vol_flags=autoresize
    _EOF_

  - and now create the UBI image, and burn it in

    # ubinize -v -o /tmp/ubi.img -m 2048 -p 128KiB -s 512 /tmp/ubi.cfg
    # ubiformat /dev/mtd2 -s 512 -f /tmp/ubi.img

*WARNING:* at this point you'll be running the Debian kernel with version `2.6.32-trunk-kirkwood`, and if you
run `ubiattach` so you can mount it you will crash.  So, don't.

Since you already burned in the kernel in step 5, [Burn a New Kernel](http://www.plugcomputer.org/plugwiki/index.php/Installing_Debian_To_Flash#Burn_a_New_Kernel), the last step remaining is to fix up uboot to boot your new system.

As of this writing, the most recent [prebuilt kernel](http://sheeva.with-linux.com/sheeva/) for the sheeva is [2.6.32.8](http://sheeva.with-linux.com/sheeva/index.php?dir=2.6.32.8/).  This is the one I burned in earlier at offset `0x100000`.

* dry run...
  .
  Before writing anything into the uboot config, let's just see if it boots.  Power up your SheevaPlug, and interrupt it to get the uboot prompt.  Then run:

    Marvell>> setenv bootargs 'console=ttyS0,115200 ubi.mtd=2 root=ubi0:rootfs rootfstype=ubifs'
    Marvell>> nand read 0x2000000 0x100000 0x400000
    Marvell>> bootm 0x2000000

(I am no uboot expert, is there a better way to boot from nand?)

* write this config to flash
  .
  If the above booted fine for you, then you may want to make the configuration persistent to avoid fiddling with uboot on each boot.
  .
  The following procedure will set the above as the default boot:

    Marvell>> setenv bootargs_ubi console=ttyS0,115200 ubi.mtd=2 root=ubi0:rootfs rootfstype=ubifs
    Marvell>> setenv bootcmd_nand_read nand read 0x2000000 0x100000 0x400000
    Marvell>> setenv bootcmd 'setenv bootargs $(bootargs_ubi); run bootcmd_nand_read; bootm 0x2000000'

